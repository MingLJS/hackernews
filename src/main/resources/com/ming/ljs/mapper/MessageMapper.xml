<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ming.ljs.mapper.MessageMapper">
  <resultMap id="BaseResultMap" type="com.ming.ljs.bean.Message">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="from_id" jdbcType="INTEGER" property="fromId" />
    <result column="to_id" jdbcType="INTEGER" property="toId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="created_date" jdbcType="TIMESTAMP" property="createdDate" />
    <result column="has_read" jdbcType="INTEGER" property="hasRead" />
    <result column="conversation_id" jdbcType="VARCHAR" property="conversationId" />
  </resultMap>
  <sql id="Base_Column_List">
    id, from_id, to_id, content, created_date, has_read, conversation_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from message
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from message
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ming.ljs.bean.Message">
    insert into message (id, from_id, to_id, 
      content, created_date, has_read, 
      conversation_id)
    values (#{id,jdbcType=INTEGER}, #{fromId,jdbcType=INTEGER}, #{toId,jdbcType=INTEGER}, 
      #{content,jdbcType=VARCHAR}, #{createdDate,jdbcType=TIMESTAMP}, #{hasRead,jdbcType=INTEGER}, 
      #{conversationId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.ming.ljs.bean.Message">
    insert into message
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="fromId != null">
        from_id,
      </if>
      <if test="toId != null">
        to_id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="createdDate != null">
        created_date,
      </if>
      <if test="hasRead != null">
        has_read,
      </if>
      <if test="conversationId != null">
        conversation_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="fromId != null">
        #{fromId,jdbcType=INTEGER},
      </if>
      <if test="toId != null">
        #{toId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="createdDate != null">
        #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="hasRead != null">
        #{hasRead,jdbcType=INTEGER},
      </if>
      <if test="conversationId != null">
        #{conversationId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ming.ljs.bean.Message">
    update message
    <set>
      <if test="fromId != null">
        from_id = #{fromId,jdbcType=INTEGER},
      </if>
      <if test="toId != null">
        to_id = #{toId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="createdDate != null">
        created_date = #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="hasRead != null">
        has_read = #{hasRead,jdbcType=INTEGER},
      </if>
      <if test="conversationId != null">
        conversation_id = #{conversationId,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ming.ljs.bean.Message">
    update message
    set from_id = #{fromId,jdbcType=INTEGER},
      to_id = #{toId,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      created_date = #{createdDate,jdbcType=TIMESTAMP},
      has_read = #{hasRead,jdbcType=INTEGER},
      conversation_id = #{conversationId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <resultMap id="msgListResultMap" type="com.ming.ljs.util.utilBean.ConversationBeanUtil">
    <result column="sm" property="unread"/>
    <result column="cm"   property="count"/>
    <association column="mid" property="message" select="com.ming.ljs.mapper.MessageMapper.selectByPrimaryKey"/>
    <association column="from_id" property="user" select="com.ming.ljs.mapper.UserMapper.selectByPrimaryKey"/>
  </resultMap>
  <select id="msgList" resultMap="msgListResultMap">
    select
    id as mid,
    from_id,
	sum(has_read) as sm,
	count(*) as cm
    from  (select * from `message` order by `created_date` desc limit 10000000000) t
    where  t.to_id = #{userId} or t.from_id = #{userId}
    group by t.conversation_id
    </select>

  <resultMap id="msgDetailResultMap" type="com.ming.ljs.util.utilBean.MessageBeanUtil">
    <result column="from_id"  property="userId"/>
    <result column="head_url"  property="headUrl"/>
    <result column="content"  property="content"/>
    <result column="created_date"  property="createdDate"/>
  </resultMap>
  <select id="msgDetail" resultMap="msgDetailResultMap">
    select
    from_id,
    head_url,
    content,
    created_date
    from message m inner join `user` u
    on  m.from_id = u.id
    where  conversation_id = #{conversationId}
    </select>

  <update id="updateHasReadByConversationId" parameterType="com.ming.ljs.bean.Message">
    update message
    set has_read = #{hasRead}
    where conversation_id = #{conversationId}
  </update>

</mapper>